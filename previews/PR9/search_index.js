var documenterSearchIndex = {"docs":
[{"location":"#Wordlegames.jl","page":"Home","title":"Wordlegames.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to play and analyze Wordle and Wordle-like games.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GameNode\nGamePool\nGuessScore\nbincounts!\nentropy2\nexpectedpoolsize\noptimalguess\nplaygame!\nreset!\nscore\nscoreupdate!\nshowgame!\ntiles\ntree\nupdateguess!","category":"page"},{"location":"#Wordlegames.GameNode","page":"Home","title":"Wordlegames.GameNode","text":"GameNode\n\nNode type for tree representing game play on a GamePool{N}(@ref)\n\nFields are:\n\nscore: a GameScore(@ref) for this target based on the score that generated the node\nchildren: Vector{GameNode} of children of this node\n\n\n\n\n\n","category":"type"},{"location":"#Wordlegames.GamePool","page":"Home","title":"Wordlegames.GamePool","text":"GamePool{N,S,G}\n\nA struct that defines a Wordle-like game with targets of length N. S <: Unsigned is the smallest unsigned integer type that can store values in the range 0:(3 ^ N - 1) (obtained as Wordlegames.scoretype(N)) and G <: GuessType is the guess type, which defaults to MaximizeEntropy.\n\nThe fields are:\n\nguesspool: a Vector{NTuple{N,Char}} of potential guesses\nvalidtargets: a BitVector of valid targets in the guesspool\nallscores: a cache of pre-computed scores as a Matrix{S} of size (sum(validtargets), length(guesspool))\nactive: a BitVector. The active pool of targets is guesspool[active].\ncounts: Vector{Int} of length 3 ^ N in which bin counts are accumulated\nguesses: Vector{GuessScore} recording game play\nhardmode: Bool - should the game be played in \"Hard Mode\"?\n\nConstructor signatures include\n\nGamePool(guesspool::Vector{NTuple{N,Char}}, validtargets::BitVector; guesstype=MaximizeEntropy, hardmode::Bool=true) where {N}\nGamePool(guesspool::Vector{NTuple{N,Char}}; guesstype=MaximizeEntropy, hardmode::Bool=true) where {N}\nGamePool(guesspool::AbstractVector{<:AbstractString}; guesstype=MaximizeEntropy, hardmode::Bool=true)\nGamePool(guesspool::AbstractVector; guesstype=MaximizeEntropy, hardmode::Bool=true)\n\n\n\n\n\n","category":"type"},{"location":"#Wordlegames.GuessScore","page":"Home","title":"Wordlegames.GuessScore","text":"GuessScore\n\nA NamedTuple for recording a guess and its score, when available.\n\n\n\n\n\n","category":"type"},{"location":"#Wordlegames.bincounts!","page":"Home","title":"Wordlegames.bincounts!","text":"bincounts!(counts, active, scorevec)\nbincounts!(gp::GamePool, k)\n\nReturn counts overwritten with bin probabilities from scorevec[active] or update gp.counts from gp.active and gp.allscores[:,k].\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.entropy2","page":"Home","title":"Wordlegames.entropy2","text":"entropy2(counts::AbstractVector{<:Real})\nentropy2(gp::GamePool)\n\nReturn the base-2 entropy of counts or gp.counts, converted to probabilities.\n\nThe result is the entropy measured in bits. See the Wikipedia entry for the definition of entropy in information theory.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.expectedpoolsize","page":"Home","title":"Wordlegames.expectedpoolsize","text":"expectedpoolsize(gp::GamePool)\n\nReturn the expected pool size from gp.counts.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.optimalguess","page":"Home","title":"Wordlegames.optimalguess","text":"optimalguess(gp::GamePool{N,S,G}) where {N,S,G}\n\nReturn the optimal guess as a Tuple{Int,Float64,Float64} from view(gp.guesspool, gp.active) according to strategy G\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.playgame!","page":"Home","title":"Wordlegames.playgame!","text":"playgame!(gp::GamePool, ind::Integer)\nplaygame!(gp::GamePool[, rng::AbstractRNG])\nplaygame!(gp::GamePool{N}, target::NTuple{N,Char}) where {N}\nplaygame!(gp::GamePool{N}, target::AbstractString) where {N}\n\nReturn gp after playing a game with target gp.targetpool[ind], or a randomly chosen target or target given as an AbstractString or NTuple{N,Char}.\n\nA target as a string must have length(target) == N.\n\nSee also: showgame!\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.reset!","page":"Home","title":"Wordlegames.reset!","text":"reset!(gp::GamePool)\n\nReturn gp with its active, guess, and entropy fields reset to initial values.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.score","page":"Home","title":"Wordlegames.score","text":"score(guess, target)\nscore(gp::GamePool, targetind::Integer)\n\nReturn a generalized Wordle score for guess at target, as an Int in 0:((3^length(zip(guess,target))) - 1).\n\nThe second method returns a precomputed score at gp.allscores[targetind, last(gp.guessinds)].\n\nIn Wordle both guess and target would be length-5 character strings and each position in guess is scored as green if it matches target in the same position, yellow if it matches target in another position, and gray if there is no match. This function returns such a score as a number whose base-3 representation is 0 for no match, 1 for a match in another position and 2 for a match in the same position.\n\nSee also: tiles for converting this numeric score to colored tiles.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.scoreupdate!","page":"Home","title":"Wordlegames.scoreupdate!","text":"scoreupdate!(gp::GamePool, sc::Integer)\nscoreupdate!(gp::GamePool{N}, scv::Vector{<:Integer}) where {N}\n\nUpdate gp with the score sc, or a vector scv of length N whose elements are 0, 1, or 2 for last(gp.guesses)\n\nAlways push!(gp.scores, sc).  If sc is the maximum possible score, 3 ^ N - 1, the game is over and return gp. Otherwise, update gp.active and call updateguess!(gp).\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.showgame!","page":"Home","title":"Wordlegames.showgame!","text":"showgame!(gp::GamePool[, target])\n\nReturn a Tables.ColumnTable of playgame!(gp, target))).\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.tiles","page":"Home","title":"Wordlegames.tiles","text":"tiles(score, ntiles)\n\nReturn a length-ntiles String tile pattern from the numeric score score.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.tree","page":"Home","title":"Wordlegames.tree","text":"tree(gp::GamePool, inds::AbstractVector{<:Integer})\ntree(gp::GamePool{N}, targets::AbstractVector{NTuple{N,Char}})\ntree(gp::GamePool, targets::AbstractVector{<:AbstractString})\ntree(gp::GamePool)\n\nReturn the root GameNode of a tree of the result of playgame!.(Ref(gp), inds)\n\nA print_tree method is available for this tree.\n\n\n\n\n\n","category":"function"},{"location":"#Wordlegames.updateguess!","page":"Home","title":"Wordlegames.updateguess!","text":"updateguess!(gp::GamePool)\n\nChoose the optimal guess the GuessType of gp and push! a new tuple onto gp.guesses.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
